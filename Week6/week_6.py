# -*- coding: utf-8 -*-
"""week 6

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-oAmC4f1lvRsoH25fkQUVbn7TKzXzGa6
"""

import time

def timer_decorator(func):
    def wrapper(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        end = time.time()
        print(f"Execution time: {end - start:.4f} seconds")
        return result
    return wrapper

@timer_decorator
def long_task():
    time.sleep(2)
    print("Task completed.")

# Example usage
long_task()

def calculate():
    try:
        a = float(input("Enter numerator: "))
        b = float(input("Enter denominator: "))
        result = a / b
        print("Result:", result)
    except ZeroDivisionError:
        print("Error: Division by zero.")
    except ValueError:
        print("Error: Invalid number input.")
    except Exception as e:
        print("An unexpected error occurred:", e)

# Example usage
calculate()

import json

data = {"name": "Afifa", "course": "Python", "week": 6}

# Write to JSON file
with open("data.json", "w") as f:
    json.dump(data, f, indent=4)

# Read from JSON file
with open("data.json", "r") as f:
    loaded_data = json.load(f)
    print("Loaded JSON:", loaded_data)

from collections import Counter, defaultdict, namedtuple

# Counter example
words = ["python", "data", "python", "code"]
print("Word count:", Counter(words))

# defaultdict example
d = defaultdict(int)
for letter in "hello":
    d[letter] += 1
print("DefaultDict:", dict(d))

# namedtuple example
Person = namedtuple("Person", "name age")
p = Person("Afifa", 20)
print("Name:", p.name)

import threading
import time
def task(name, delay):
    print(f"{name} started")
    time.sleep(delay)
    print(f"{name} finished")
t1 = threading.Thread(target=task, args=("Thread 1", 2))
t2 = threading.Thread(target=task, args=("Thread 2", 3))
t1.start()
t2.start()
t1.join()
t2.join()
print("Both threads completed.")