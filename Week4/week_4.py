# -*- coding: utf-8 -*-
"""week 4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cEDzfRW9cw0mPn7eaaS_E3H9i84UiSKa
"""

#task 1
def binary_search(arr, target):
    low = 0
    high = len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid  # Found at index
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1  # Not found
arr = [2, 4, 6, 8, 10, 12, 14]
target = int(input("Enter the number to search: "))
index = binary_search(arr, target)

if index != -1:
    print(f"{target} found at index {index}.")
else:
    print(f"{target} not found in the list.")

def matrix_multiplication(A, B):
    result = [[0 for _ in range(len(B[0]))] for _ in range(len(A))]

    for i in range(len(A)):
        for j in range(len(B[0])):
            for k in range(len(B)):
                result[i][j] += A[i][k] * B[k][j]

    return result

# Example matrices
A = [[1, 2], [3, 4]]
B = [[5, 6], [7, 8]]

print("Matrix A * B is:")
for row in matrix_multiplication(A, B):
    print(row)

def tower_of_hanoi(n, source, target, auxiliary):
    if n == 1:
        print(f"Move disk 1 from {source} to {target}")
        return
    tower_of_hanoi(n-1, source, auxiliary, target)
    print(f"Move disk {n} from {source} to {target}")
    tower_of_hanoi(n-1, auxiliary, target, source)

# Example usage
disks = 3
tower_of_hanoi(disks, 'A', 'C', 'B')

def char_frequency(text):
    freq = {}
    for char in text:
        if char != ' ':  # ignore spaces
            char = char.lower()
            freq[char] = freq.get(char, 0) + 1
    return freq

# Example usage
text = input("Enter a string: ")
result = char_frequency(text)

print("Character frequencies:")
for char, count in result.items():
    print(f"{char}: {count}")

import heapq
def dijkstra(graph, start):
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    priority_queue = [(0, start)]
    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)
        if current_distance > distances[current_node]:
            continue
        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))
    return distances
graph = {
    'A': {'B': 2, 'C': 4},
    'B': {'A': 2, 'C': 1, 'D': 7},
    'C': {'A': 4, 'B': 1, 'D': 3},
    'D': {'B': 7, 'C': 3}
}
start_node = 'A'
shortest_paths = dijkstra(graph, start_node)

print(f"Shortest distances from node {start_node}:")
for node, dist in shortest_paths.items():
    print(f"{node}: {dist}")