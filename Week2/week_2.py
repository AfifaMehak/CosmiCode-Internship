# -*- coding: utf-8 -*-
"""week 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BLRNepITfKgtxhaUIHVadyeO9UpctXtz
"""

#task 1
def is_prime(n):
    """Check if a number is prime."""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True
def list_primes_up_to(n):
    """List all prime numbers up to n."""
    primes = []
    for num in range(2, n+1):
        if is_prime(num):
            primes.append(num)
    return primes
num = int(input("Enter a number: "))
if is_prime(num):
    print(f"{num} is a prime number.")
else:
    print(f"{num} is not a prime number.")
print("Prime numbers up to", num, "are:")
print(list_primes_up_to(num))

#Task 2
def fibonacci_iterative(n):
    sequence = []
    a, b = 0, 1
    for _ in range(n):
        sequence.append(a)
        a, b = b, a + b
    return sequence
def fibonacci_recursive(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    else:
        seq = fibonacci_recursive(n-1)
        seq.append(seq[-1] + seq[-2])
        return seq
print("First 30 Fibonacci numbers (Iterative):")
print(fibonacci_iterative(30))
print("\nFirst 30 Fibonacci numbers (Recursive):")
print(fibonacci_recursive(30))

# task 3
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a
def lcm(a, b):
    return (a * b) // gcd(a, b)
num1 = int(input("Enter first number: "))
num2 = int(input("Enter second number: "))
print(f"GCD of {num1} and {num2} is {gcd(num1, num2)}")
print(f"LCM of {num1} and {num2} is {lcm(num1, num2)}")

# task 4
def prime_factors(n):
    factors = []
    while n % 2 == 0:
        factors.append(2)
        n //= 2
    i = 3
    while i * i <= n:
        while n % i == 0:
            factors.append(i)
            n //= i
        i += 2
    if n > 2:
        factors.append(n)
    return factors
num = int(input("Enter a number to find its prime factors: "))
print("Prime factors:", prime_factors(num))

#task 5
def max_subarray_sum(arr):
    max_current = max_global = arr[0]
    for x in arr[1:]:
        max_current = max(x, max_current + x)
        if max_current > max_global:
            max_global = max_current
    return max_global


arr = list(map(int, input("Enter list of numbers separated by spaces: ").split()))
print("Maximum subarray sum is:", max_subarray_sum(arr))