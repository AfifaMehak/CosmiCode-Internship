# -*- coding: utf-8 -*-
"""week5

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T8Ua2Azpl7fjXTiVo3NqgEgcCx1Xzs3y
"""

class BankAccount:
    def __init__(self, account_number, owner, balance=0):
        self.account_number = account_number
        self.owner = owner
        self.balance = balance
    def deposit(self, amount):
        self.balance += amount
        print(f"{amount} deposited. New balance: {self.balance}")
    def withdraw(self, amount):
        if amount <= self.balance:
            self.balance -= amount
            print(f"{amount} withdrawn. New balance: {self.balance}")
        else:
            print("Insufficient balance.")
    def transfer(self, other_account, amount):
        if amount <= self.balance:
            self.withdraw(amount)
            other_account.deposit(amount)
        else:
            print("Transfer failed: insufficient balance.")
acc1 = BankAccount("123", "Alice", 1000)
acc2 = BankAccount("456", "Bob", 500)
acc1.transfer(acc2, 200)

import math
class Shape:
    def area(self):
        pass
    def perimeter(self):
        pass
class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius
    def area(self):
        return math.pi * self.radius**2
    def perimeter(self):
        return 2 * math.pi * self.radius
class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height
    def area(self):
        return self.width * self.height
    def perimeter(self):
        return 2 * (self.width + self.height)
class Triangle(Shape):
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c
    def perimeter(self):
        return self.a + self.b + self.c
    def area(self):
        s = self.perimeter() / 2
        return math.sqrt(s * (s - self.a) * (s - self.b) * (s - self.c))
circle = Circle(5)
print("Circle area:", circle.area())

class Vehicle:
    def __init__(self, brand, wheels):
        self.brand = brand
        self.wheels = wheels
    def describe(self):
        print(f"Brand: {self.brand}, Wheels: {self.wheels}")
class Car(Vehicle):
    def __init__(self, brand, wheels, fuel_type):
        super().__init__(brand, wheels)
        self.fuel_type = fuel_type
    def describe(self):
        super().describe()
        print(f"Fuel Type: {self.fuel_type}")
class Bike(Vehicle):
    def __init__(self, brand, wheels, type_):
        super().__init__(brand, wheels)
        self.type = type_
    def describe(self):
        super().describe()
        print(f"Type: {self.type}")
car = Car("Toyota", 4, "Petrol")
bike = Bike("Honda", 2, "Sport")
car.describe()
bike.describe()

class Complex:
    def __init__(self, real, imag):
        self.real = real
        self.imag = imag
    def __add__(self, other):
        return Complex(self.real + other.real, self.imag + other.imag)
    def __str__(self):
        return f"{self.real} + {self.imag}i"
# Example usage
c1 = Complex(3, 4)
c2 = Complex(2, -1)
result = c1 + c2
print("Sum:", result)

class FileManager:
    def __init__(self, filename):
        self.filename = filename
    def write_file(self, content):
        with open(self.filename, 'w') as f:
            f.write(content)
    def append_file(self, content):
        with open(self.filename, 'a') as f:
            f.write(content)
    def read_file(self):
        with open(self.filename, 'r') as f:
            return f.read()
fm = FileManager("example.txt")
fm.write_file("This is the first line.\n")
fm.append_file("This is an appended line.\n")
print("File content:\n", fm.read_file())